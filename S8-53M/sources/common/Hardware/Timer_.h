// (c) Aleksandr Shevchenko e-mail : Sasha7b9@tut.by
#pragma once 


struct TypeTimer {
    enum E
    {
        ShowLevelRShiftA,       // Нужно устанавливать, когда изменяется положение ручки смещения канала 1.
        ShowLevelRShiftB,       // Нужно устанавливать, когда изменяется положение ручки смещения канала 2.
        ShowLevelTrigLev,       // Нужно устанавливать, когда изменяется положение ручки уровня синхронизации
        NumSignalsInSec,        // Для установки количества считываний сигнала в секунду.
        P2P,                    // Таймер для чтения данных в режиме поточечного вывода.
        ShowMessages,           // Таймер для засекания время показа информационных и предупреждающих сообщений.
        MenuAutoHide,           // Таймер для отсчёта времени скрывания меню.
        RShiftMarkersAutoHide,  // Таймер для отсчёта времени скрывания дополнительных боковых меток.
        CDC,                    // Вспомогательный таймер для CDC
        StopSound,              // Выключить звук
        TemporaryPauseFPGA,     // Временная пауза для фиксации сигнала на экране после поворота ручек
        DisplayUpdate,          // Этот таймер могут использовать функции, использующие свою процедуру рисования
        Count                   // Общее количество таймеров.
    };
};


namespace Timer
{
    // Функция вызывается по прерыванию системного таймера для работы таймеров.
    // Увеличивает внутреннее время таймеров на 1мс.
    void Callback1ms();

    void Enable(TypeTimer::E type, int timeInMS, pFuncVV);

    // Остановить таймер.
    void Disable(TypeTimer::E type);
};
