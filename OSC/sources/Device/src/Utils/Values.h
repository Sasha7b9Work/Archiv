#pragma once


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Hex
{
public:
    Hex(uint v) : value(v) {};
    /// ѕреобразует значение в текстовую строку в шестнадцатиричном виде. depth задаЄт разр€дность числа - 8, 16 или 32 бит.
    char* ToHex(int depth, char bufferOut[9]) const;
    /// ѕреобразует значение в текстовую строку в двоичном виде. depth задаЄт разр€дность числа - 8, 16 или 32 бит.
    char* ToBin(int depth, char bufferOut[36]) const;
    /// ¬озвращает символ в позиции pos от последнего (младшего)
    char DigitInPosition(int pos) const;

    void Set(uint v) { value = v; };
    /// ¬озвращает число дес€тичных разр€дов.
    int NumDigits() const;

    operator uint() const { return value; };

private:

    char *BinToString8(uint8 value, char buffer[9]) const;

    uint value;
};

//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Integer
{
public:

    Integer(int v) : value(v) {};
    /// \brief ѕреобразует value в текстовую строку
    /// \attention —трока будет хранитьс€ до следующего вызова функции. ≈сли результат нужен большее количество времени, то его нужно скопировать себе
    char* ToString(bool alwaysSign,   ///< если установлен в true, знак будет выводитьс€ всегда
                   int numMinFields,  ///< минимальное число занимаемых знакомест. ≈сли дл€ вывода числа столько не требуетс€, лишние заполн€ютс€ нул€ми
                   char bufferOut[20] ///< сюда записываетс€ возвращаемое значение
    ) const;

    int NumDigits() const;

private:

    int value;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Frequency
{
public:
    Frequency(float v) : value(v) {};

    char* ToString(char bufferOut[20]) const;
    /// ѕреобразует freq герц в текстовую строку. ѕри этом число количество цифр в строке равно numDigits
    char* ToStringAccuracy(char bufferOut[20], int numDigits) const;

private:
    float value;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Time
{
public:

    Time(float v) : value(v) {};
    /// ѕреобразует врем€ в текстовую строку
    char* ToString(bool alwaysSign,      ///< если true, знак показываетс€ даже если time > 0
                   char buffer[20]       ///< сюда записываетс€ возвращаемое значение
    ) const;
    /// ѕреобразует time секунд в текстовую строку
    char* ToStringAccuracy(bool alwaysSign,      ///< если true, знак показываетс€ даже если time > 0
                           char bufferOut[20],   ///< сюда записываетс€ возвращаемое значение
                           int numDigits         ///< количество цифр в строке
    ) const;

private:

    float value;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Voltage
{
public:

    Voltage(float v) : value(v) {};

    char* ToString(bool alwaysSign, char buffer[20]) const;

private:

    float value;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Phase
{
public:

    Phase(float v) : value(v) {};

    char* ToString(char buffer[20]) const;

private:

    float value;
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Float
{
public:

    Float(float v);
    /// \brief ѕереводит число с плавающей точкой в текстовый вид. numDigits - число цифровых знакомест
    /// \attention —трока будет хранитьс€ до следующего вызова функции. ≈сли результат нужен большее количество времени, то его нужно скопироавать себе.
    /// \retval указатель на строку с числом.
    char *ToString(bool alwaysSign, int numDigits, char bufferOut[20]) const;

private:
    float m_val;
};
