//  [12/17/2009 Sasha]
#pragma once

namespace NS_AlteraAddressSpace {

	/*
	Если четвёртый бит установлен, то от прибора приходит ответ.
	При записи в регистры, в номере которых установлен 4-й бит, от прибора приходит ответ, поэтому нужно записывать в WRITE_N_BYTES единицу,
	чтобы не приходило много всякой ботвы.
	*/
    enum WRITE {
        WRITE_START      = 0x00,  // Сразу после настройки порта перед работой с прибором нужно заслать сюда любое число. "Общий старт", так сказать.
        WRITE_ATTR_RG1   = 0x01,  // Запись информации в регистр управления каналом 1 - параметры напряжения первого канала
        WRITE_ATTR_RG2   = 0x02,  // Запись информации в регистр управления каналом 2 - параметры напряжения второго канала
        WRITE_PRED_RG3   = 0x03,  // Младший байт предзапуска
        WRITE_ATTR_RG4   = 0x04,  // Доп. параметры каналов
                                  // бит 1 - установлен - отлючена синхронизация
                                  //       - сброшен    - канал синхронизации управляется битом 6
        WRITE_RAZV_RG5   = 0x05,  // Масштаб по времени
        WRITE_POST_RG6   = 0x06,  // Младший байт послезапуска
        WRITE_POST_RG7   = 0x07,  // Старший байт послезапуска
        WRITE_PRED_RG8   = 0x08,  // Старший байт предзапуска
        WRITE_SHIFT_RGB  = 0x0b,  // Запись завершающего нуля при записи смещения по напряжению и уровня синхронизации
        WRITE_TRIG_F     = 0x0d,  // D0 - 0 для синхронизации фронтом, 1 для синхронизации срезом;  // D1 - 0 - ждущий режим, 1 - автоматический режим
        WRITE_STOP       = 0x1c,  // Вспомогательный стоп. Позволяет избавиться от проникновения некоторых точек первого канала во второй
        WRITE_START2     = 0x1e,  // Запуск альтеры. После записи в этот регистр прибор начинает считывать информацию
        WRITE_UPR        = 0x20,  // 0 - обычный режим, 1 - по точкам
        WRITE_N_BYTES    = 0x21,  // В этот регистр записывается информация о количестве запрашиваемых байт
                                  // 0x01 - 1 байт, 0х02 - 8 байт, 0х04 - 16 байт, 0х08 - 32 байта,
                                  // 0х10 - 64 байт, 0х20 - 128 байт, 0х40 - 256 байт, 0х80 - 512 байт
        WRITE_RSHIFT_LO  = 0x23,  // Младший байт смещения по напряжению
        WRITE_RSHIFT_HI  = 0x24,  // Старший байт смещения по напряжению
        WRITE_STOP2      = 0xff
    };

    enum READ {
        READ_CONTR1   = 0x11,   // Чтение данных первого канала
        READ_CONTR2   = 0x12,	// Чтение данных второго канала
        READ_INT1     = 0x13,   // Чтение младшего байта интерполятора
        READ_INT2     = 0x14,   // Чтение старшего байта интерполятора
        READ_FL       = 0x1a,   // Анализом двух младших битов определяем готовность данных; 
                                // 0 - данные готовы
                                // 1 - есть синхроимпульс, используется для вывода информации
                                // 2 - для рандомизатора
                                // 3 - есть синхроимпульс, используется для автопоиска
                                // 4 - если 1, то готова точка
                                // 5 - есть две синхронизации - на экране не менее двух периодов - для автопоиска
        READ_POINT_1  = 0x1b,   // Чтение 1 канала по точкам
        READ_POINT_2  = 0x1d,   // Чтение 2 канала по точкам
        READ_RAZV_RG5   = 0x1f  // Чтение RAZV_RG5
    };
}